{"version":3,"sources":["components/App.js","index.js"],"names":["App","useState","toptext","setTopText","bottomText","setBottomText","templates","setTemplates","selectedId","setSelectedId","url","setUrl","textUrlError","setTextUrlError","meme","setMeme","errorBottom","setErrorBottom","errorTop","setErrorTop","errorTextBottom","setErrorTextBottom","errorTextTop","setErrorTextTop","useEffect","fetch","then","res","json","data","memes","handleChange","e","fildName","target","name","fieldValue","value","className","onSubmit","preventDefault","console","log","Boolean","length","params","template_id","text0","text1","username","password","qs","stringify","resp","placeholder","type","onChange","src","alt","map","item","id","onClick","imageId","handleClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4deacc28.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport qs from 'qs';\nfunction App() {\n  const [toptext, setTopText] = useState('')\n  const [bottomText, setBottomText] = useState('')\n  const [templates, setTemplates] = useState([]);\n  const [selectedId, setSelectedId] = useState(null);\n  const [url, setUrl] = useState(null);\n  const [textUrlError, setTextUrlError] = useState(false)\n\n  const [meme, setMeme] = useState(null)\n\n  const [errorBottom, setErrorBottom] = useState(false)\n  const [errorTop, setErrorTop] = useState(false)\n  const [errorTextBottom, setErrorTextBottom] = useState(null)\n  const [errorTextTop, setErrorTextTop] = useState(null)\n\n  useEffect(() => {\n    fetch('https://api.imgflip.com/get_memes')\n      .then(res => res.json())\n      .then(res => setTemplates(res.data.memes))\n  }, []);\n\n\n\n  const handleChange = (e) => {\n    const fildName = e.target.name;\n    const fieldValue = e.target.value;\n    if(fildName === \"top\" ) {\n      setTopText(fieldValue)\n    } else {\n      setBottomText(fieldValue)\n    }\n  }\n  const reset = () => {\n    setErrorTop(false)\n    setErrorBottom(false)\n    setErrorTextTop(null)\n    setErrorTextBottom(null)\n    setTextUrlError(false)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    reset();\n    console.log(Boolean(!url))\n    if(Boolean(!url) ) {\n      setTextUrlError(true)\n    }\n    if(toptext.length<2 ) {\n      setErrorTop(true)\n      setErrorTextTop('Za mało textu')\n    }\n    if(bottomText.length<2) {\n      setErrorBottom(true)\n      setErrorTextBottom('Za mało textu')\n    }\n\n    if(toptext.length<2 || bottomText.length<2) {\n      return;\n    }\n    const params = {\n      template_id: selectedId,\n      text0: toptext,\n      text1: bottomText,\n      username: 'xzk03017',\n      password: 'xzk03017@cndps.com'\n    }\n    {url&&fetch(`https://api.imgflip.com/caption_image?${qs.stringify(params)}`)\n    .then(resp => resp.json()\n    .then(json=> {\n      setMeme(json.data.url)\n    }))}\n    \n      setTopText('')\n      setBottomText('')\n  }\n  const handleClick = (imageId, url) => {\n    setSelectedId(imageId)\n    setUrl(url)\n    setMeme(null)\n  }\n  return (\n    <div className=\"App\">\n        <form onSubmit={handleSubmit}>\n          <div className=\"container\">\n           <div className=\"text\"> Wpisz tekst na góre obrazka</div>\n          <input placeholder=\"wpisz tekst\" type=\"text\" name=\"top\" className={errorTop&&\"errorInputTop\"} value={toptext} onChange={handleChange}/>\n          {errorTextTop&&<div className=\"error\">Za mało tekstu</div>}\n          </div>\n\n       <div  className=\"container\">\n            <div className=\"text\">tekst na dole obrazka</div>\n          <input placeholder=\"wpisz tekst\" type=\"text\" name=\"bottom\" className={errorBottom&&\"errorInputBottom\"} value={bottomText} onChange={handleChange}/>\n          {errorTextBottom&&<div className=\"error\">Za mało tekstu</div>}\n       </div>\n          <input className=\"button\" type=\"submit\" value=\"Wygeneruj\"/>\n          {textUrlError&&<div className=\"error\">Nie wybrano obrazka!</div>}\n        </form>\n\n        \n        \n        <div className=\"meme\">\n          <div>{meme ? <img className=\"meme-img\" src={meme}/>:null}</div>\n          <div className=\"url-rec\">{url&&<img src={url} alt=\"click image\"/>}</div>\n        </div>\n        <div className=\"description\">Wybierz obrazek który chcesz przerobić.</div>\n        <div className=\"meme-container\">\n            {templates && templates.map(item => (\n              <img src={item.url} id={item.id} alt=\"item\" onClick={() => handleClick(item.id, item.url, null)}/>\n            ))}\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}